# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
# Original: https://github.com/actions/starter-workflows/blob/main/pages/astro.yml
name: Deploy Astro site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [$default-branch]
  pull_request:
    branches: [$default-branch]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      - name: Get changed files
        id: changed-files
        run: |
            if ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
            else
                echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
            fi
      - name: Get folder name
        id: changed-folder
        run: |
            first_changed_file=$(echo "${{ steps.changed-files.outputs.changed_files }}" | cut -d ' ' -f 1)
            echo "First changed file: $first_changed_file"
            first_folder_name="${first_changed_file%%/*}"
            echo "Folder Name: $first_folder_name"
            echo "folder_name=$first_folder_name" >> $GITHUB_OUTPUT
      - name: Install
        shell: "bash"
        working-directory: "./${{ steps.changed-folder.outputs.folder_name }}/"
        run: npm install
  
      - name: Build
        shell: "bash"
        working-directory: "./${{ steps.changed-folder.outputs.folder_name }}/"
        run: npm run build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./${{ steps.changed-folder.outputs.folder_name }}/dist
          #Could be a good place to put version number
          destination_dir: ./${{ steps.changed-folder.outputs.folder_name }}
      
      # - name: Detect package manager
      #   id: detect-package-manager
      #   run: |
      #     if [ -f "${{ github.workspace }}/yarn.lock" ]; then
      #       echo "manager=yarn" >> $GITHUB_OUTPUT
      #       echo "command=install" >> $GITHUB_OUTPUT
      #       echo "runner=yarn" >> $GITHUB_OUTPUT
      #       echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
      #       exit 0
      #     elif [ -f "${{ github.workspace }}/package.json" ]; then
      #       echo "manager=npm" >> $GITHUB_OUTPUT
      #       echo "command=ci" >> $GITHUB_OUTPUT
      #       echo "runner=npx --no-install" >> $GITHUB_OUTPUT
      #       echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
      #       exit 0
      #     else
      #       echo "Unable to determine package manager"
      #       exit 1
      #     fi
      # - name: Setup Node
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: "20"
      #     cache: ${{ steps.detect-package-manager.outputs.manager }}
      #     cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
      # - name: Setup Pages
      #   id: pages
      #   uses: actions/configure-pages@v5
      # - name: Install dependencies
      #   run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      #   working-directory: ${{ env.BUILD_PATH }}
      # - name: Build with Astro
      #   run: |
      #     ${{ steps.detect-package-manager.outputs.runner }} astro build \
      #       --site "${{ steps.pages.outputs.origin }}" \
      #       --base "${{ steps.pages.outputs.base_path }}"
      #   working-directory: ${{ env.BUILD_PATH }}
      # - name: Upload artifact
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: ${{ env.BUILD_PATH }}/dist
