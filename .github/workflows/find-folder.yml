# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18


      - name: Get changed files
        id: changed-files
        run: |
            if ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
            else
                echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
            fi

      - name: Get folder name
        id: changed-folder
        run: |
            # for file in ${{ steps.changed-files.outputs.changed_files }}; do
            #     echo "$file was changed"
            # done
            first_changed_file=$(echo "${{ steps.changed-files.outputs.changed_files }}" | cut -d ' ' -f 1)
            echo "First changed file: $first_changed_file"
            # echo "::set-output name=first_changed_file::$first_changed_file"
            # echo "The first changed file is: ${{ steps.extract-first-changed-file.outputs.first_changed_file }}"
            first_folder_name="${first_changed_file%%/*}"
            echo "Folder Name: $first_folder_name"
            echo "folder_name=$first_folder_name" >> $GITHUB_OUTPUT

      - name: Install
        shell: "bash"
        working-directory: "./${{ steps.changed-folder.outputs.folder_name }}"
        run: npm install
  
      - name: Build
        shell: "bash"
        working-directory: "./${{ steps.changed-folder.outputs.folder_name }}"
        run: npm run build
      
      - name: Install and deploy to surge
        run: |
            npm install -g surge
            surge ./${{ steps.changed-folder.outputs.folder_name }}/dist ${{ steps.changed-folder.outputs.folder_name }}.surge.sh --token ${{ secrets.SURGE_TOKEN }}


      # - name: Install, build, and upload your site output
      #   uses: withastro/action@v3
      #   with:
      #       path: "./${{ steps.changed-folder.outputs.folder_name }}" # The root location of your Astro project inside the repository. (optional)
      #       # node-version: 20 # The specific version of Node that should be used to build your site. Defaults to 18. (optional)
      #       # package-manager: pnpm@latest # The Node package manager that should be used to install dependencies and build your site. Automatically detected based on your lockfile. (optional)
      #   # run: |
      #   #     echo "The folder name is: ${{ steps.changed-folder.outputs.folder_name }}"


  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: github-pages
  #     url: "${{ steps.deployment.outputs.page_url }}/onboarding-tutorials/${{ steps.changed-folder.outputs.folder_name }}"
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4            

            
      # Get folder that was added
      # - name: Detect Added Folder
      #   run: |
      #     echo "added_folders=$(git diff --name-only --diff-filter=A HEAD^1 HEAD | grep -E '^.*/')" >> $GITHUB_OUTPUT
      #     for folder in ${{ steps.changed-files.outputs.added_folders }}; do
      #       echo "Added folder: $folder"
      #     done

      # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Hello, world!

      # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     echo Add other actions to build,
      #     echo test, and deploy your project.
